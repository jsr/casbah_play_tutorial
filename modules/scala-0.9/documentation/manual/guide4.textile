h1. Viewing and posting comments

The blog home page is now set, and we will continue by writing the post details page. This page will show all the comments about the current post, and will include a form to post new comments.

h2. <a>Creating the ‘show’ action</a>

To display the post details page, we will need a new action method on the **Application** controller. Let’s call it **show**:

bc. def show(id: Long) = {
    Post.byIdWithAuthorAndComments(id).map( p =>
        Template('item -> new { val (post,author,comments) = p })
    ).getOrElse(NotFound("No such Post"))
}

As you can see this action is pretty simple. We declare the **id** method parameter to automatically retrieve the HTTP **id** parameter as a **Long** Scala value. This parameter will be extracted either from the query string, from the URL path or from the request body.

p(note). If we try to send an **id** HTTP parameter that is not a valid number, Play will automatically add a validation error to the **errors** container.

This action will display the **/yabe/app/views/Application/show.html** template:

bc. #{extends 'main.html' /}
#{set title:item.post.title /}
 
#{display item, as:'full' /}

Because we’ve already written the **display** tag, this page is really simple to write.

h2. <a>Adding links to the details page</a>

In the display tag we’ve left all links empty (using **#**). It’s now time to make these links point to the **Application.show** action. With Play you can easily build links in a template using the **@{...} notation**. This syntax uses the router to ‘reverse’ the URL needed to call the specified action. 

Let’s edit the **/yabe/app/views/tags/display.html** tag:

bc. ...
<h2 class="post-title">
    <a href="@{show(_arg?.post.id)}">${_arg?.post.title}</a>
</h2>
...

You can new refresh the home page, and click a post title to display the post.

!images/guide4-0!

It’s great, but it lacks a link to go back to the home page. Edit the **/yabe/app/views/main.html** template to complete the title link:

bc. ...
<div id="title">
    <span class="about">About this blog</span>
    <h1><a href="@{Application.index()}">${blogTitle}</a></h1>
    <h2>${blogBaseline}</h2>
</div>
... 

We can now navigate between the home page and the post detail pages.

h2. <a>Specifying a better URL</a>

As you can see, the post detail page URL looks like:

bc. /application/show?id=1

This is because Play has used the default ‘catch all’ route.

bc. *       /{controller}/{action}                  {controller}.{action}

We can have a better URL by specifying a custom path for the **Application.show** action. Edit the **/yabe/conf/routes** file and add this route after the first one:

bc. GET     /posts/{id}                             Application.show

p(note). This way the **id** parameter will be extracted from the URL path. 

Refresh the browser and check that it now uses the correct URL.

h2. <a>Adding pagination</a>

To allow users to navigate easily through posts, we will add a pagination mechanism. We’ll extend the Post class to be able to fetch previous and next post as required.

Here is the SQL query we will use to fetch both previous and next post from a particular element:

bc. (
    select *, 'next' as pos from post 
    where postedAt < {date} order by postedAt desc limit 1
)
    union
(
    select *, 'prev' as pos from post 
    where postedAt > {date} order by postedAt asc limit 1
)
 
order by postedAt desc

And we will translate the result as a @(Option[Post], Option[Post])@ value, where the first element of the tuple is the previous post, and the second element is the next post:

bc. opt('pos.is("prev") ~> Post.on("")) ~ opt('pos.is("next") ~> Post.on(""))

Here is the new @prevNext@ method we need to add to the @Post@ class:

bc. def prevNext = {        
    SQL(
        """
            (
                select *, 'next' as pos from post 
                where postedAt < {date} order by postedAt desc limit 1
            )
                union
            (
                select *, 'prev' as pos from post 
                where postedAt > {date} order by postedAt asc limit 1
            )
 
            order by postedAt desc
            
        """
    ).on("date" -> postedAt).as( 
        opt('pos.is("prev")~>Post.on("")) ~ opt('pos.is("next")~>Post.on("")) 
    )
}

Now, let's add this information to the *show.html* template:

bc. def show(id: Long) = {
    Post.byIdWithAuthorAndComments(id).map( p =>
        Template(
            'item -> new { val (post,author,comments) = p },
            'pagination -> p._1.prevNext
        )
    ).getOrElse(NotFound("No such Post"))
}

We will call these methods several times during a request so they could be optimized, but they’re good enough for now. Also, add the pagination links at the top of the **show.html** template (before the **#{display/}** tag):

bc. <ul id="pagination">
    #{if pagination._1}
        <li id="previous">
            <a href="@{show(pagination._1?.id)}">
                ${pagination._1?.title}
            </a>
        </li>
    #{/if}
    #{if pagination._2}
        <li id="next">
            <a href="@{show(pagination._2?.id)}">
                ${pagination._2?.title}
            </a>
        </li>
    #{/if}
</ul>

It’s better now.

h2. <a>Adding the comment form</a>

Now it’s time to set up a comments form. We’ll start by adding the **postComment** action method to the Application controller.

bc. def postComment(postId:Long, author:String, content:String) = {
    Comment.create(Comment(postId, author, content))
    Action(show(postId))
}

As you we return an @Action@ value to indicate that we want to redirect to the @show(postId)@ action.

Let’s write the HTML form in the **show.html** template (after the **#{display /}** tag in fact):

bc. <h3>Post a comment</h3>
 
#{form @postComment(item?.post.id)}
    <p>
        <label for="author">Your name: </label>
        <input type="text" name="author" />
    </p>
    <p>
        <label for="content">Your message: </label>
        <textarea name="content"></textarea>
    </p>
    <p>
        <input type="submit" value="Submit your comment" />
    </p>
#{/form}

You can now try posting a new comment. It should just work.

!images/guide4-1!

h2. <a>Adding validation</a>

Currently we don’t validate the form content before creating the comment. We would like to make both fields required. We can easily use the Play validation mechanism to ensure that the HTTP parameters are correctly filled in. Modify the **postComment** action to add **@Required** validation annotations and check that no error occurs:

bc. def postComment(
    postId:Long, 
    @Required author:String, 
    @Required content:String) = {
        
    if(validation.hasErrors) {
        show(postId)
    } else {
        Comment.create(Comment(postId, author, content))
        Action(show(postId))
    }
}

p(note). **Don’t forget** to import **play.data.validation.Annotations._** as well.

As you can see, in case of validation errors, we re-display the post detail page. We have to modify the form code to display the error message:

bc. <h3>Post a comment</h3>
 
#{form @postComment(item?.post.id)}
 
    #{ifErrors}
        <p class="error">
            All fields are required!
        </p>
    #{/ifErrors}
 
    <p>
        <label for="author">Your name: </label>
        <input type="text" name="author" value="${params.author}" />
    </p>
    <p>
        <label for="content">Your message: </label>
        <textarea name="content">${params.content}</textarea>
    </p>
    <p>
        <input type="submit" value="Submit your comment" />
    </p>
#{/form}

Note that we reuse the posted parameters to fill the HTML input values.

To make the UI feedback more pleasant for the poster, we will add a little JavaScript to automatically set focus on the comment form in case of an error. As this script uses "JQuery Tools Expose":files/jquery.tools.min.js as support libraries, you have to include them. Download these two libraries to the **yabe/public/javascripts/** directory and modify the **main.html** template to include them:

bc. …
    <script src="@{'/public/javascripts/jquery-1.5.2.min.js'}"></script> 
    <script src="@{'/public/javascripts/jquery.tools.min.js'}"></script>
…

Now you can add this script to the **show.html** template (add it at the end of the page):

bc. <script type="text/javascript" charset="utf-8">
    $(function() {         
        // Expose the form 
        $('form').click(function() { 
            $('form').expose({api: true}).load(); 
        }); 
        
        // If there is an error, focus to form
        if($('form .error').size()) {
            $('form').expose({api: true, loadSpeed: 0}).load(); 
            $('form input[type=text]').get(0).focus();
        }
    });
</script>

!images/guide4-2!

The comment form looks pretty cool now. We will add two more things.

First, we will display a success message after a comment is successfully posted. For that, we use the flash scope that allows us to pass messages from one action call to the next one.

Modify the **postComment** action to add a success message:

bc. def postComment(
    postId:Long, 
    @Required author:String, 
    @Required content:String) = {
        
    if(validation.hasErrors) {
        show(postId)
    } else {
        Comment.create(Comment(postId, author, content))
        flash += "success" -> ("Thanks for posting " + author)
        Action(show(postId))
    }
}

and display the success message in **show.html** if present (add it at the top the page):

bc. …
#{if flash.success}
    <p class="success">${flash.success}</p>
#{/if}
…

!images/guide4-3!

The last thing we will adjust in this form is the URL used for the **postComment** action. As always, it uses the default catch-all route because we didn’t define any specific route. So add this route to the application routes file:

bc. POST    /posts/{postId}/comments                Application.postComment

That’s done.

p(note). Next: %(next)"Setting up a Captcha":guide5%. 

